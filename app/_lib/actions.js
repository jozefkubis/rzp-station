"use server";

import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";
import { createClient } from "@/utils/supabase/server";

// MARK: LOGIN
export async function login(formData) {
  const supabase = await createClient();

  const data = {
    email: formData.get("email"),
    password: formData.get("password"),
  };

  const { error } = await supabase.auth.signInWithPassword(data);

  if (error) {
    console.error("Chyba pri prihlasovan√≠:", error);
    return { error: error.message };
  }

  revalidatePath("/", "layout");
  redirect("/");
}

// MARK: LOGOUT
export async function logout() {
  const supabase = await createClient();

  const { error } = await supabase.auth.signOut();

  if (error) {
    console.error("Chyba pri odhl√°sen√≠:", error);
    return { error: error.message };
  }

  redirect("/login");
}

// MARK: SIGNUP
export async function signup(formData) {
  const supabase = await createClient();

  const email = formData.get("email");
  const password = formData.get("password");
  const re_password = formData.get("re_password");

  // Overenie, ƒçi s√∫ v≈°etky polia vyplnen√©
  if (!email || !password || !re_password) {
    return { error: "V≈°etky polia s√∫ povinn√©." };
  }

  // Skontroluj, ƒçi u≈æ existuje profil s dan√Ωm e-mailom
  const { data: existingProfile, error: profilesError } = await supabase
    .from("profiles")
    .select("email")
    .eq("email", email)
    .single();

  // Ak nastane in√° chyba ako "z√°znam sa nena≈°iel", ohl√°s chybu
  if (profilesError && profilesError.code !== "PGRST116") {
    console.error(profilesError);
    return { error: "Email nie je mo≈æn√© naƒç√≠ta≈•" };
  }

  // Ak pou≈æ√≠vateƒæ s t√Ωmto emailom u≈æ existuje
  if (existingProfile) {
    return { error: "U≈æ√≠vateƒæ s t√Ωmto emailom u≈æ existuje" };
  }

  // Kontrola, ƒçi sa hesl√° zhoduj√∫
  if (password !== re_password) {
    return { error: "Hesl√° sa nezhoduj√∫." };
  }

  // Kontrola minim√°lnej dƒ∫≈æky hesla
  if (password.length < 6) {
    return { error: "Heslo mus√≠ by≈• dlh≈°ie ako 6 znakov." };
  }

  // Registr√°cia pou≈æ√≠vateƒæa
  const { data: result, error } = await supabase.auth.signUp({
    email,
    password,
  });

  if (error) {
    console.error("Chyba pri registr√°cii:", error);
    return { error: error.message };
  }

  // O≈°etrenie neautorizovan√©ho pou≈æ√≠vateƒæa (napr. pri probl√©me s tokenom)
  if (error?.status === 401) {
    await supabase.auth.signOut();
    redirect("/login");
  }

  // Ak pou≈æ√≠vateƒæ e≈°te nem√° session ‚Äì po≈°li ho overi≈• e-mail
  if (!result.session) {
    revalidatePath("/", "layout");
    redirect("/verify-email");
  }

  // V opaƒçnom pr√≠pade ‚Äì √∫spe≈°n√° registr√°cia, presmeruj domov
  revalidatePath("/", "layout");
  redirect("/");
}

// MARK: INSERT/UPDATE PROFILES
export async function InsertUpdateProfilesDataForm(formData) {
  const supabase = await createClient();

  // üîê Z√≠skame aktu√°lne prihl√°sen√©ho pou≈æ√≠vateƒæa
  const {
    data: { user },
    error: userError,
  } = await supabase.auth.getUser();

  if (userError || !user) {
    console.error("Nie je prihl√°sen√Ω pou≈æ√≠vateƒæ", userError);
    redirect("/login");
    return;
  }

  // üßæ Z√≠skanie aktu√°lneho profilu z datab√°zy
  const { data: existingProfile, error: profileError } = await supabase
    .from("profiles")
    .select("*")
    .eq("id", user.id)
    .single();

  if (profileError && profileError.code !== "PGRST116") {
    console.error("Chyba pri naƒç√≠tan√≠ profilu:", profileError);
    return { error: "Nepodarilo sa naƒç√≠ta≈• profil." };
  }

  const newData = {
    full_name: formData.get("full_name"),
    username: formData.get("username"),
    address: formData.get("address"),
    dateOfBirth: formData.get("dateOfBirth"),
    medCheckDate: formData.get("medCheckDate"),
  };

  // üéØ Zist√≠me, ktor√© polia sa skutoƒçne zmenili
  const updatedFields = {};
  for (const key in newData) {
    if (newData[key] && newData[key] !== existingProfile?.[key]) {
      updatedFields[key] = newData[key];
    }
  }

  // üñº Pr√°ca s obr√°zkom (avatar)
  let avatar = formData.get("avatar");

  if (avatar && avatar instanceof File) {
    const avatarName = `${Date.now()}-${avatar.name}`.replace(/\s/g, "-");

    // ‚òÅÔ∏è Upload obr√°zka do Supabase storage (bucket: "avatars")
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from("avatars")
      .upload(avatarName, avatar, { cacheControl: "3600", upsert: true });

    if (uploadError) {
      console.error("Chyba pri nahr√°van√≠ obr√°zka:", uploadError);
      return { error: "Nepodarilo sa nahra≈• obr√°zok." };
    }

    // üåê Vytvorenie URL k nahrat√©mu obr√°zku
    const avatarPath = `https://kjfjavkvgocatxssthrv.supabase.co/storage/v1/object/public/avatars/${avatarName}`;

    // üîó Prid√°me URL obr√°zka do d√°t pre datab√°zu
    updatedFields.avatar_url = avatarPath;
  }

  // ‚õî Ak nie s√∫ ≈æiadne zmeny, netreba robi≈• niƒç
  if (Object.keys(updatedFields).length === 0) {
    console.log("≈Ωiadne zmeny sa nena≈°li, niƒç neupdatujem.");
    return;
  }

  // üíæ Ulo≈æime len zmenen√© polia
  const { error } = await supabase
    .from("profiles")
    .upsert(
      {
        id: user.id,
        ...updatedFields,
      },
      { onConflict: "id" },
    )
    .single();

  if (error) {
    console.error("Chyba pri upserte profilu:", error);
    redirect("/error");
  }

  revalidatePath("/", "layout");
}

// MARK: UPDATE USER
export async function updateUser(formData) {
  const supabase = await createClient();

  const newPassword = formData.get("newPassword");
  const re_newPassword = formData.get("re_newPassword");

  if (!newPassword) {
    return { error: "Heslo nem√¥≈æe by≈• pr√°zdne." };
  }

  if (newPassword.length < 6) {
    return { error: "Heslo mus√≠ ma≈• aspo≈à 6 znakov." };
  }

  if (newPassword !== re_newPassword) {
    return { error: "Hesl√° sa nezhoduj√∫." };
  }

  const { data: result, error } = await supabase.auth.updateUser({
    password: newPassword,
  });

  if (error) {
    console.error("Chyba pri zmene hesla:", error);

    // ≈°peci√°lne o≈°etrenie pre neautorizovan√©ho pou≈æ√≠vateƒæa
    if (error.status === 401) {
      await supabase.auth.signOut();
      redirect("/login");
    }

    return { error: error.message };
  }

  if (!result.session) {
    await supabase.auth.signOut();
    revalidatePath("/", "layout");
    redirect("/login");
  }

  revalidatePath("/", "layout");
}
